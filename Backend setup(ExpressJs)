const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const app = express();

app.use(express.json());
app.use(cors());

const db = mysql.createConnection({
  host: 'localhost', user: 'root', password: '', database: 'stores_db'
});

// User Signup
app.post('/signup', async (req, res) => {
  const { name, email, password, role } = req.body;
  const hash = await bcrypt.hash(password, 10);
  db.query('INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, ?)', [name, email, hash, role], (err) => {
    if (err) return res.status(400).json({ error: err.message });
    res.json({ success: true });
  });
});

// User Login
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  db.query('SELECT * FROM users WHERE email = ?', [email], async (err, results) => {
    if (results.length && await bcrypt.compare(password, results.password)) {
      const token = jwt.sign({ id: results.id, role: results.role }, 'SECRET');
      res.json({ token, role: results.role });
    } else {
      res.status(401).json({ error: 'Invalid credentials' });
    }
  });
});

// Get Stores
app.get('/stores', (req, res) => {
  db.query('SELECT * FROM stores', (err, results) => {
    res.json(results);
  });
});

// Submit/Modify Rating
app.post('/rating', (req, res) => {
  const { user_id, store_id, rating } = req.body;
  db.query('REPLACE INTO ratings (user_id, store_id, rating) VALUES (?, ?, ?)', [user_id, store_id, rating], (err) => {
    if (err) return res.status(400).json({ error: err.message });
    res.json({ success: true });
  });
});

app.listen(3001, () => console.log('Backend running on 3001'));
